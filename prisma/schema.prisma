generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Solicitacao {
  id            String   @id @default(cuid())
  produtoId     String
  quantidade    Int
  solicitanteId String
  status        String   @default("PENDENTE")
  observacao    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  produto       Produto  @relation(fields: [produtoId], references: [id])
  solicitante   User     @relation("solicitacoesFeitas", fields: [solicitanteId], references: [id])

  @@index([produtoId])
  @@index([solicitanteId])
}

model Movimentacao {
  id            String      @id @default(cuid())
  itemEstoqueId String
  origemId      String
  destinoId     String
  responsavelId String
  data          DateTime    @default(now())
  destino       Localizacao @relation("movimentacoesDestino", fields: [destinoId], references: [id])
  itemEstoque   ItemEstoque @relation(fields: [itemEstoqueId], references: [id])
  origem        Localizacao @relation("movimentacoesOrigem", fields: [origemId], references: [id])
  responsavel   User        @relation(fields: [responsavelId], references: [id])

  @@index([itemEstoqueId])
  @@index([origemId])
  @@index([destinoId])
  @@index([responsavelId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 String         @id @default(cuid())
  name               String?
  username           String @unique
  email              String?
  emailVerified      DateTime?
  password           String?
  image              String?
  localizacaoId       String?
  localizacao         Localizacao?  @relation(fields: [localizacaoId], references: [id])
 
  role               Role           @default(ADMIN)
  accounts           Account[]
  movimentacoes      Movimentacao[]
  sessions           Session[]
  solicitacoesFeitas Solicitacao[]  @relation("solicitacoesFeitas")
}

model Categoria {
  id        String    @id @default(cuid())
  nome      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  produtos  Produto[]
}

model Localizacao {
  id                   String         @id @default(cuid())
  nome                 String         @unique
  descricao            String?
    tipo      TipoLocalizacao   @default(ALMOXARIFADO)

  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
      User                 User[]

  items                ItemEstoque[]
  movimentacoesDestino Movimentacao[] @relation("movimentacoesDestino")
  movimentacoesOrigem  Movimentacao[] @relation("movimentacoesOrigem")
    parentId             String?
  @@index([parentId])
}

model Produto {
  id                      String           @id @default(cuid())
  nome                    String
  sku                     String?          @unique
  descricao               String?
  tipo                    TipoProduto
  tempoEntrega            Int?
  categoriaId             String
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  estoqueSeguranca12Meses Int?
  estoqueSeguranca1Mes    Int?
  pontoPedido12Meses      Int?
  pontoPedido1Mes         Int?
  entradas                EntradaEstoque[]
  items                   ItemEstoque[]
  categoria               Categoria        @relation(fields: [categoriaId], references: [id])
  solicitacoes            Solicitacao[]

  @@index([categoriaId])
}

model EntradaEstoque {
  id               String   @id @default(cuid())
  quantidade       Int
  dataChegada      DateTime @default(now())
  numeroNotaFiscal String
  fornecedor       String?
  produtoId        String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  produto          Produto  @relation(fields: [produtoId], references: [id])

  @@index([produtoId])
}

model ItemEstoque {
  id            String         @id @default(cuid())
  serialNumber  String?        @unique
  condicao      CondicaoItem
  status        StatusItem     @default(EM_ESTOQUE)
  produtoId     String
  localizacaoId String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  localizacao   Localizacao    @relation(fields: [localizacaoId], references: [id])
  produto       Produto        @relation(fields: [produtoId], references: [id])
  movimentacoes Movimentacao[]

  @@index([produtoId])
  @@index([localizacaoId])
}

enum Role {
  ADMIN
  ALMOXARIFADO
  GERENTE_REGIONAL
  TECNICO
}

enum TipoProduto {
  SERIALIZADO
  QUANTIDADE
}

enum CondicaoItem {
  NOVO
  REUTILIZADO
}

enum StatusItem {
  EM_ESTOQUE
  ALOCADO
  INSTALADO
  DEFEITUOSO
  EM_REPARO
}

enum TipoLocalizacao {
  REGIAO
  ALMOXARIFADO
  TECNICO
}